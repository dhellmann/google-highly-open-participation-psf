#summary Notes from previously suggested tasks
#labels mentors

= Introduction =

These are notes from task suggestions which came in while we were planning the contest.  This information is here for historical context only.  The authoritative source of tasks for contestants is the Open issues list.  These notes may diverge from the final tasks as they were written up.  When in doubt, follow the instructions in the task and ask questions on the mailing list.


== rosettacode.org ==

"Simple programming problems" solved in multiple prog languages

Michael Mol suggests:

{{{
> -> Rosetta Code, where simple programming problems
> -> are solved in as many as 79 programming languages.  While most of the
> -> tasks (a shade under 80%) already have Python solutions, there are a
> -> few that don't.  Even so, the tasks that already have Python solutions
> -> could be instructional.
Here's a list of all the pages that (as I write this) don't have
Python examples.  Currently, there are 25.  I don't know Python, but
here are my best guesses regarding difficulty:

Trivial
http://rosettacode.org/rosettacode/w/index.php?title=Bitwise_operations
http://rosettacode.org/rosettacode/w/index.php?title=Data_Representation_-_Controlling_Fields_in_a_Structure
http://rosettacode.org/rosettacode/w/index.php?title=File_Modification_Time
http://rosettacode.org/rosettacode/w/index.php?title=File_Rename
http://rosettacode.org/rosettacode/w/index.php?title=File_Size
http://rosettacode.org/rosettacode/w/index.php?title=Logical_operations

Easy
http://rosettacode.org/rosettacode/w/index.php?title=Binary_search
http://rosettacode.org/rosettacode/w/index.php?title=Doubly-Linked_List_%28element_insertion%29
http://rosettacode.org/rosettacode/w/index.php?title=Doubly-Linked_List_%28element%29
http://rosettacode.org/rosettacode/w/index.php?title=Flow_Control_Structures
http://rosettacode.org/rosettacode/w/index.php?title=MD5
http://rosettacode.org/rosettacode/w/index.php?title=Prime_numbers

Moderate
http://rosettacode.org/rosettacode/w/index.php?title=Object_Serialization
http://rosettacode.org/rosettacode/w/index.php?title=OpenGL
http://rosettacode.org/rosettacode/w/index.php?title=Parametric_Polymorphism
http://rosettacode.org/rosettacode/w/index.php?title=SQL-Based_Authentication

Hard
http://rosettacode.org/rosettacode/w/index.php?title=Distributed_program
http://rosettacode.org/rosettacode/w/index.php?title=Determine_if_Only_One_Instance_is_Running
http://rosettacode.org/rosettacode/w/index.php?title=Quine

Unknown
http://rosettacode.org/rosettacode/w/index.php?title=Data_Representation_-_Getting_the_Size
http://rosettacode.org/rosettacode/w/index.php?title=Data_Representation_-_Specifying_Minimum_Size
http://rosettacode.org/rosettacode/w/index.php?title=Defining_Primitive_Data_Types
http://rosettacode.org/rosettacode/w/index.php?title=HTTPS_request_with_authentication
http://rosettacode.org/rosettacode/w/index.php?title=Insertion_sort
http://rosettacode.org/rosettacode/w/index.php?title=Pattern_Matching
http://rosettacode.org/rosettacode/w/index.php?title=XML_and_XPath


}}}

== Performance testing for WideFinder implementations ==

Author: Grig Gheorghiu

By now I think everybody is familiar with Tim Bray's Wide Finder
challenge: <http://www.tbray.org/ongoing/When/200x/2007/09/20/Wide-Finder>.
For those who are not familiar, Tim Bray is running a language/implementation
shoot-out for the fastest program that can parse a 1 million line log file.

The effbot has a few solutions in Python here: <http://effbot.org/zone/wide-finder.htm> -- one of them is a single-threaded program, the other one is a multi-threaded program,
and the third one is a simulation of a multi-processor program.

I think we can isolate 3 different tasks for the students, with each task taking
2 of effbot's 3 solutions, timing them over the course of a few runs, then
graphing them for comparison purposes using the matplotlib Python library.

For extra credit, the student would time and graph all 3 solutions.

== Increase unit test code coverage in the Python std lib ==

Author: Titus Brown

There are a number of modules with very poor/low test coverage.  I will assemble a list
of the most egregious ones.

This task would need some good documentation describing how to *measure* this kind of code coverage.  Easy enough for me to write, I think...

== Try out Google's TCMalloc with Python ==

Author: Titus Brown

Do performance tests on Python after replacing malloc with TCMalloc,

        http://goog-perftools.sourceforge.net/doc/tcmalloc.html  

See http://www.python.org/doc/2.3.5/whatsnew/section-pymalloc.html

and use

Use pybench, 'python Tools/pybench/pybench.py'.

./configure --without-pymalloc

to get rid of pymalloc. Three benchmarks:

with pymalloc (default) with pymalloc and with TCmalloc without pymalloc and with TCmalloc

== Add useful terms to the glossary ==

Author: Georg Brandl

In the new docs the glossary, previously in the tutorial, is meant to be a central location to explain Python- and probably computer science-specific terms that many newbie won't know yet.  The task is to collect more such terms, explain them in the glossary and cross-reference their occurrences in the rest of the docs.

== Update library docs w.r.t. str/unicode changes ==

Author: Georg Brandl

Look through library docs and find where "unicode" is mentioned and should be changed to "str", and where "str" should be "bytes".

== Update code examples in docs ==

Author: Georg Brandl

Review the code examples in the library documentation, updating to 3.0 syntax where needed.


Comment by ti...@idyll.org, Nov 17, 2007

We should identify a few specific sections. I don't have a good sense for where the code examples are wrong, and the entire library docs seems like a big job!

