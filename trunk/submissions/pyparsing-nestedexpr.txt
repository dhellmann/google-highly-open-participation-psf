# Submitted by Paul McGuire ptmcg@austin.rr.com

tags = "pyparsing,tests"

summary = """
Write unit tests for the pyparsing nestedExpr feature.
"""

description = """

pyparsing 1.4.8 introduced the nestedExpr helper method, to create
pyparsing expressions that match expressions within nested opening and
closing delimiters (such as nested parenthesese, braces, brackets,
etc.).  Here is the documentation of nestedExpr:

'''Helper method for defining nested lists enclosed in opening and
closing delimiters ("(" and ")" are the default).

   Parameters:
    - opener - opening character for a nested list (default="("); can
also be a pyparsing expression
    - closer - closing character for a nested list (default=")"); can
also be a pyparsing expression
    - content - expression for items within the nested lists
(default=None)
    - ignoreExpr - expression for ignoring opening and closing
delimiters (default=quotedString)

   If an expression is not provided for the content argument, the
   nested expression will capture all whitespace-delimited content
   between delimiters as a list of separate values.

   Use the ignoreExpr argument to define expressions that may contain
   opening or closing characters that should not be treated as opening
   or closing characters for nesting, such as quotedString or a
   comment expression.  Specify multiple expressions using an Or or
   MatchFirst.  The default is quotedString, but if no expressions are
   to be ignored, then pass None for this argument.  '''

Here is an example script using nestedExpr:
http://pyparsing.wikispaces.com/space/showimage/nested.py

Write a set of unit tests using the template below that will
demonstrate successful implementation of nestedExpr.  Tests should
show:

- use of default arguments
- use of non-default arguments (such as a pyparsing-defined comment
  expression in place of quotedString)
- use of a custom content expression
- use of a pyparsing expression for opener and closer is *OPTIONAL*
- use of input data containing nesting delimiters
- correct grouping of parsed tokens according to nesting of opening
  and closing delimiters in the input string
- any other tests of parsing behavior you feel are interesting (do
  NOT bother with tests of invalid arguments)

Optional: 

  If you want to write up a test plan first, you may submit this for
  review before writing the test script, if you want feedback or
  suggestions.


Completion:

  Submit your unit test script and any descriptive text to the ghop-
  python mailing list.

Test template:

    from pyparsing import <pyparsing names used by the test>

    # define test input string or strings
    <test-input-string> = "blah blah"

    # define grammar to test pyparsing feature
    expr = <pyparsing expression construction goes here>

    # define expected result
    expected = <list of expected tokens or token groups>

    # run test
    result = expr.parseString(<test-input-string>)

    # print out diagnostic values
    print result.dump()

    # assert successful results
    assert <successful-test-condition>, <test-failure-message>
    assert not <negative-test-condition>, <negative-test-passed-but-shouldnt-have-message>

Here is an example of a unit test that partially exercises the
pyparsing Word class:

    from pyparsing import Word, alphas, alphanums

    # define test input string or strings
    testInputString = "Area51 T2 Alien3"

    # define grammar to test pyparsing feature
    expr  = Word(alphas)

    # define expected result
    expected = [['Area'], ['T'], ['Alien']]

    # run test
    result = expr.searchString(testInputString)

    # print out diagnostic values
    print result.dump()

    # assert successful results
    assert result.asList() == expected, "Failed test, expected %s, got %s" % (expected, result.asList())


You can view existing unit tests at:

http://pyparsing.svn.sourceforge.net/viewvc/pyparsing/src/unitTests.py?revision=121&view=markup

It is not necessary to update this file with the new test.  Just write
the code which I will then integrate back into the test suite as the
body of a runTest method of a new test class.


BONUS: 

There is a bug in the version of nestedExpr released in 1.4.8 that
reads too much data - all of the values after the last matched closing
delimiter is read as additional content, at a "zero'th" nesting level.
This is fixed in the SVN version of pyparsing on SourceForge.  Write a
unit test that will show that the code fix actually fixed the bug.
"""

owner = "ptmcg@austin.rr.com"
